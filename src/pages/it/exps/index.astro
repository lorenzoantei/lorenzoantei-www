---

import ExpsLayout from '../../../layouts/ExpsLayout.astro';

import { getCollection } from 'astro:content';

import FormattedDate from '../../../components/FormattedDate.astro';

// Recupera tutti i exp ordinati per data
const exps = (await getCollection('expsItList'))
  .filter((exp) => exp.data.published === true)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const activePage='exps';

const mode='exps';

import { getTranslations, getLocale } from '../../../utils/i18n.js';

const t = getTranslations(Astro.url.pathname);
const locale = getLocale(Astro.url.pathname);
---

<ExpsLayout {activePage} {mode}>

	<main class="pt-60 md:pt-42 mx-2 lg:mx-28">
    <section class="md:p-6">
      
      <div class="text-gray-400">
        <div class="flex justify-start py-2">
          <p class="origin-center inline-block text-4xl ">
            [
          </p>
        </div>
        <!-- Lista Esperienze -->
        <ul id="exps-list" class="grid gap-6">
          {exps.map((exp, index) => {
            const year = new Date(exp.data.pubDate).getFullYear();
        
            // Logica colori e trasformazioni casuali
            const bgColors = [
              "hover:bg-pink-500",
              "hover:bg-blue-500",
              "hover:bg-green-500",
              "hover:bg-yellow-400",
              "hover:bg-purple-500",
              "hover:bg-rose-400",
              "hover:bg-cyan-400",
            ];
        
            // Fisherâ€“Yates shuffle
            function shuffleArray(array) {
              const arr = [...array];
              for (let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
              }
              return arr;
            }
        
            const shuffledColors = shuffleArray(bgColors);
            let colorIndex = 0;
            const getNextColor = () => {
              const color = shuffledColors[colorIndex];
              colorIndex = (colorIndex + 1) % shuffledColors.length;
              return color;
            };
        
            const getRandomTransform = () => {
              const tx = Math.floor(Math.random() * 5) - 2;
              const ty = Math.floor(Math.random() * 5) - 2;
              const rot = Math.floor(Math.random() * 5) - 2;
              return `translate-x-[${tx}px] translate-y-[${ty}px] rotate-[${rot}deg]`;
            };
        
            const colorClass = getNextColor();
            const transformClass = getRandomTransform();
        
            return (
              <li data-year={year} class="
                exp-item 
                hover:animate-pulse 
                animate-fade-in-out
                duration-3000 
                md:border-0"
              >
                <a href={`/${locale}/exps/${exp.id}/`}>
                  <div
                    class={`group px-2 text-xl py-4 ml-6 rounded-tr-lg rounded-br-lg transition-all duration-500 ease-in-out hover:scale-[1.08] hover:hover-weird-blip ${colorClass} ${transformClass}`}
                  >
                    <div class="pl-2">{"{"}</div>
                    <div class=" pl-4 text-2xl md:text-2xl lg:text-3xl">"{t.title}": "<span class="text-black underline md:no-underline">{exp.data.title}</span>",</div>
                    <div class="pl-4">
                      "{t.date}": "<FormattedDate date={exp.data.pubDate} />",
                    </div>
                    <div class="pl-2">
                      {"}"}
                      {index < exps.length - 1 ? "," : ""}
                    </div>
                  </div>
                </a>
              </li>
            );
          })}
        </ul>
        <div class="flex justify-start py-2">
          <p class="origin-center inline-block text-4xl">
            ]
          </p>
        </div>
      </div>
      
    </section>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const buttons = document.querySelectorAll(".filter-btn");
      const exps = document.querySelectorAll(".exp-item");

      buttons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const year = btn.getAttribute("data-year");

          // Rimuove la classe active da tutti i pulsanti
          buttons.forEach(b => b.classList.remove("bg-black", "text-orange-500"));

          // Aggiunge classe active al pulsante cliccato
          btn.classList.add("bg-black", "text-orange-500");

          // Filtra i post
          exps.forEach((exp) => {
            if (year === "all" || exp.getAttribute("data-year") === year) {
              exp.style.display = "";
            } else {
              exp.style.display = "none";
            }
          });
        });
      });
    });

  </script>
  
</ExpsLayout>
