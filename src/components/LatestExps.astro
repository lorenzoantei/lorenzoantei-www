---
import FormattedDate from "../components/FormattedDate.astro";

import { getCollection } from "astro:content";
import { getTranslations, getLocale } from '../utils/i18n.js';

const locale = getLocale(Astro.url.pathname);

// mappa locale -> collezione
const collectionsMap = {
  en: 'expsEnList',
  it: 'expsItList',
};

// fallback nel caso in cui locale non sia trovato
const collectionName = collectionsMap[locale] ?? 'expsEnList';

const exps = (await getCollection(collectionName))
  .filter((exp) => exp.data.published === true)
  .filter((exp) => exp.data.tags.includes("home"))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 5);

  console.log(exps);

const bgColors = [
  "hover:bg-pink-500",
  "hover:bg-blue-500",
  "hover:bg-green-500",
  "hover:bg-yellow-400",
  "hover:bg-purple-500",
  "hover:bg-rose-400",
  "hover:bg-cyan-400",
];

// Fisherâ€“Yates shuffle
function shuffleArray(array) {
  const arr = [...array];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// Sequenza colori casuale
const shuffledColors = shuffleArray(bgColors);

let colorIndex = 0;
function getNextColor() {
  const color = shuffledColors[colorIndex];
  colorIndex = (colorIndex + 1) % shuffledColors.length;
  return color;
}

const getRandomTransform = () => {
  const tx = Math.floor(Math.random() * 5) - 2;
  const ty = Math.floor(Math.random() * 5) - 2;
  const rot = Math.floor(Math.random() * 5) - 2;
  return `translate-x-[${tx}px] translate-y-[${ty}px] rotate-[${rot}deg]`;
};

const t = getTranslations(Astro.url.pathname);
---

<section class="text-white min-h-screen">
  <div class="p-3 md:p-24 bg-black pb-12">
    <h3 class="mb-8">
      <span class="text-3xl bg-white pl-1 pr-3 py-3 text-black inline-block">
        {t.latestexperiences}
      </span>
      <ul>
        <div class="py-3">[</div>

        {
          exps.map((exp, index) => {
            const colorClass = getNextColor();
            const transformClass = getRandomTransform();

            return (
            <li key={exp.id} class="text-gray-500">
              <a href={`/${locale}/exps/${exp.id}/`}>
                <div
                  class={`group px-2 text-xl py-4 ml-6 rounded-tr-lg rounded-br-lg transition-all duration-300 ease-in-out hover:scale-[1.08] hover:animate-pulse ${colorClass} ${transformClass}`}
                >
                  <div class="pl-2 group-hover:text-black">{"{"}</div>

                  <div class="pl-4 text-4xl group-hover:text-black">
                    "{t.title}": "<span class="group-hover:text-black group-hover:underline text-white">{exp.data.title}</span>",
                  </div>

                  <div class="pl-4 group-hover:text-black">
                    "{t.date}": "<FormattedDate date={exp.data.pubDate} />",
                  </div>

                  <div class="pl-2 group-hover:text-black">
                    {"}"}
                    {index < exps.length - 1 ? "," : ""}
                  </div>
                </div>
              </a>
            </li>

            );
          })
        }

        <div class="py-3">]</div>
      </ul>

      <div class="py-12">
        <a
          class="text-2xl pl-1 mt-6 pr-8 pt-8 pb-1 bg-pink-500 hover:animate-pulse bg-opacity-50 text-white opacity-100 duration-3000 pointer-events-auto cursor-pointer"
          href={`/${locale}/exps`}
        >
          {t.more}...
        </a>
      </div>
      
    </h3>
  </div>
</section>
