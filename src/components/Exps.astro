---
import { getRelativeLocaleUrl } from 'astro:i18n';

import FormattedDate from './FormattedDate.astro';

// Recupera tutti i exp ordinati per data
const exps = (await getCollection('expsEnList'))
	.filter((exp) => exp.data.published === true)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Ottieni anni unici
const years = [...new Set(exps.map((p) => new Date(p.data.pubDate).getFullYear()))]
  .sort((a, b) => b - a);

import { getTranslations, getLocale } from '../utils/i18n.js';
import { getCollection } from 'astro:content';

const t = getTranslations(Astro.url.pathname);
const locale = getLocale(Astro.url.pathname);
// calcola la lingua opposta
const opposite = locale === "it" ? "en" : "it";
// costruisci la nuova URL sostituendo solo il prefisso
const currentPath = Astro.url.pathname;
const newPath = currentPath.replace(/^\/(it|en)/, `/${opposite}`);
---

<section class="md:p-6">
    <h2 class="text-3xl text-black py-3 pl-1 pr-3 md:p-3 md:pl-2 inline-block animate-bg-rotate animate-pulse mb-2">
        {t.experiences}
    </h2>
    
    <!-- Pulsanti Anni -->
    <div class="my-4 md:my-0 flex gap-2 flex-wrap">
        {years.map((year) => (
            <button 
                data-year={year} 
                class="filter-btn pl-1 pr-3 py-1 md:p-3 md:pl-2 bg-white hover:bg-pink-500 hover:text-black transition-colors duration-300 cursor-pointer text-2xl"
                >
                {year}
            </button>
        ))}
    </div>

    <div class="text-gray-200 pl-4 md:pl-0">
        <div class="flex justify-start py-2">
            <p class="origin-center inline-block text-4xl ">
            [
            </p>
        </div>
        <!-- Lista Esperienze -->
        <ul id="exps-list" class="grid gap-6">
            {exps.map((exp, index) => {
            const year = new Date(exp.data.pubDate).getFullYear();
        
            // Logica colori e trasformazioni casuali
            const bgColors = [
                "hover:border-1 hover:border-pink-500 hover:text-pink-500",
                "hover:border-1 hover:border-blue-500 hover:text-blue-500",
                "hover:border-1 hover:border-green-500 hover:text-green-500",
                "hover:border-1 hover:border-yellow-400 hover:text-yellow-400",
                "hover:border-1 hover:border-purple-500 hover:text-purple-500",
                "hover:border-1 hover:border-rose-400 hover:text-rose-400",
                "hover:border-1 hover:border-cyan-400 hover:text-cyan-400",
            ];
        
            // Fisherâ€“Yates shuffle
            function shuffleArray(array) {
                const arr = [...array];
                for (let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
                }
                return arr;
            }
        
            const shuffledColors = shuffleArray(bgColors);
            let colorIndex = 0;
            const getNextColor = () => {
                const color = shuffledColors[colorIndex];
                colorIndex = (colorIndex + 1) % shuffledColors.length;
                return color;
            };
        
            const getRandomTransform = () => {
                const tx = Math.floor(Math.random() * 5) - 2;
                const ty = Math.floor(Math.random() * 5) - 2;
                const rot = Math.floor(Math.random() * 5) - 2;
                return `translate-x-[${tx}px] translate-y-[${ty}px] rotate-[${rot}deg]`;
            };
        
            const colorClass = getNextColor();
        
            return (
                <li data-year={year} class="exp-item hover:animate-pulse duration-3000 md:border-0">
                <a href={`/${locale}/exps/${exp.id}/`}>
                    <div
                    class={`group px-2 text-xl py-4 ml-6 rounded-tr-lg rounded-br-lg transition-all duration-500 ease-in-out  ${colorClass}`}
                    >
                    <div class="pl-2">{"{"}</div>
                    <div class=" pl-4 text-2xl md:text-2xl lg:text-3xl">"{t.title}": "<span class=" underline md:no-underline">{exp.data.title}</span>",</div>
                    <div class="pl-4">
                        "{t.date}": "<FormattedDate date={exp.data.pubDate} />",
                    </div>
                    <div class="pl-2">
                        {"}"}
                        {index < exps.length - 1 ? "," : ""}
                    </div>
                    </div>
                </a>
                </li>
            );
            })}
        </ul>
        <div class="flex justify-start py-2">
            <p class="origin-center inline-block text-4xl">
            ]
            </p>
        </div>
    </div>
    
</section>